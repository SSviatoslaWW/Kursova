// View/WeatherDetailView.swift

import SwiftUI

// MARK: - –°–¢–ò–õ–¨ –ö–ù–û–ü–ö–ò –ó –ï–§–ï–ö–¢–û–ú –ì–†–ê–î–Ü–Ñ–ù–¢–ê (–û–ë–û–í'–Ø–ó–ö–û–í–û –ü–ï–†–ï–î –°–¢–†–£–ö–¢–£–†–û–Æ VIEW)
struct GradientPressableButtonStyle: ButtonStyle {
    
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .padding(.horizontal, 10)
            .padding(.vertical, 8)
            .background(
                LinearGradient(
                    gradient: Gradient(colors: [
                        Color.white.opacity(0.3),
                        Color.white.opacity(configuration.isPressed ? 0.7 : 0.5)
                    ]),
                    startPoint: .leading,
                    endPoint: .trailing
                )
            )
            .cornerRadius(8)
            .scaleEffect(configuration.isPressed ? 0.95 : 1.0)
            .foregroundColor(.white)
            .animation(.easeOut(duration: 0.15), value: configuration.isPressed)
    }
}


struct WeatherDetailView: View {
    
    @ObservedObject var viewModel: WeatherViewModel
    @ObservedObject var favoritesVM: FavoritesViewModel
    @State private var cityInput: String = ""
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                
                LinearGradient(
                    gradient: Gradient(colors: viewModel.getBackgroundGradient()),
                    startPoint: .topLeading,
                    endPoint: .bottomTrailing
                )
                .ignoresSafeArea(.all)

                VStack(spacing: 15) {
                    
                    Spacer().frame(height: 1)
                    
                    // MARK: - –ü–æ—à—É–∫ –ú—ñ—Å—Ç–∞
                    HStack {
                        TextField("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞", text: $cityInput)
                            .padding(8)
                            .background(Color.white.opacity(0.3)).cornerRadius(8)
                            .foregroundColor(.white).colorScheme(.dark)
                        
                        Button("–ü–æ—à—É–∫") {
                            if !cityInput.isEmpty {
                                // üõë –†–£–ß–ù–ò–ô –ü–û–®–£–ö –ö–û–†–ò–°–¢–£–í–ê–ß–ê: city, nil, nil
                                viewModel.fetchWeather(cityInput, nil, nil)
                            }
                        }
                        .buttonStyle(GradientPressableButtonStyle())
                    }
                    .padding(.horizontal)
                    
                    // MARK: - –û–±—Ä–æ–±–∫–∞ –°—Ç–∞–Ω—É/–ü–æ–º–∏–ª–∫–∏
                    if viewModel.isLoading {
                        ProgressView("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏...").foregroundColor(.white)
                    } else if let errorMsg = viewModel.errorMessage {
                        // üõë –í–ò–í–Ü–î –ü–û–ú–ò–õ–ö–ò: "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                        Text("‚ùå \(errorMsg)").foregroundColor(.red).padding()
                    }
                    
                    // MARK: - –û–°–ù–û–í–ù–ò–ô –í–ï–†–¢–ò–ö–ê–õ–¨–ù–ò–ô –°–ö–†–û–õ
                    ScrollView(.vertical, showsIndicators: false) {
                        VStack(spacing: 15) {
                            
                            // MARK: - –ü–æ—Ç–æ—á–Ω–∞ –ü–æ–≥–æ–¥–∞
                            if let weather = viewModel.currentWeather {
                                // ... (–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏)
                                VStack(spacing: 10) {
                                    Text(weather.name).font(.largeTitle).bold()
                                    
                                    HStack {
                                        if let iconURL = weather.weather.first?.iconURL {
                                            AsyncImage(url: iconURL) { phase in
                                                if let image = phase.image {
                                                    image.resizable().frame(width: 100, height: 100)
                                                } else if phase.error != nil {
                                                    Image(systemName: "xmark.octagon").resizable().frame(width: 100, height: 100)
                                                } else {
                                                    ProgressView().frame(width: 100, height: 100).tint(.white)
                                                }
                                            }
                                        }
                                        Text(weather.main.temperatureString)
                                            .font(.system(size: 80)).fontWeight(.light)
                                    }
                                    
                                    Text(weather.weather.first?.description.capitalized ?? "–ù–µ–≤—ñ–¥–æ–º–æ").font(.title3)
                                    
                                    // –ö–ù–û–ü–ö–ê –î–û–î–ê–¢–ò –î–û –£–õ–Æ–ë–õ–ï–ù–ò–•
                                    Button { favoritesVM.addCity(weather.name) } label: { Label("–î–æ–¥–∞—Ç–∏ –¥–æ –£–ª—é–±–ª–µ–Ω–∏—Ö", systemImage: "star.fill") }
                                        .buttonStyle(GradientPressableButtonStyle())
                                        .padding(.top)
                                    
                                    // MARK: - 1. –ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ü—Ä–æ–≥–Ω–æ–∑
                                    Text("–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ü—Ä–æ–≥–Ω–æ–∑ (24 –≥–æ–¥)").font(.headline)
                                        .frame(maxWidth: .infinity, alignment: .leading).padding(.top, 20)

                                    ScrollView(.horizontal, showsIndicators: false) {
                                        HStack(spacing: 12) {
                                            ForEach(viewModel.forecastItems, id: \.dt) { item in
                                                ForecastItemView(item: item)
                                            }
                                        }
                                    }
                                    .frame(height: 140)
                                    
                                    // MARK: - 2. 5-–¥–µ–Ω–Ω–∏–π –ü—Ä–æ–≥–Ω–æ–∑
                                    Text("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤").font(.title2).bold()
                                        .frame(maxWidth: .infinity, alignment: .leading).padding(.top, 20)

                                    ForEach(viewModel.dailyForecast, id: \.dt) { item in
                                        DailyForecastItemView(item: item)
                                    }
                                }
                                .padding(.horizontal)
                                .padding(.bottom, 20)
                                
                            }
                            
                            // –ó–∞–≥–ª—É—à–∫–∞, —è–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î
                            else if !viewModel.isLoading && viewModel.errorMessage == nil {
                                VStack {
                                    Spacer()
                                    Text("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–≥–æ–¥–∏").foregroundColor(.white.opacity(0.8))
                                    Spacer()
                                }
                            }
                            
                        }
                        .frame(minHeight: geometry.size.height - 100)
                        
                    }
                }
                .padding(.top, 10)
                .foregroundColor(.white)
                .shadow(color: .black.opacity(0.8), radius: 5, x: 0, y: 2)
                .background(Color.clear)
            }
        }
        .onAppear {
            // üõë –ê–ö–¢–ò–í–ê–¶–Ü–Ø CORE LOCATION
            if viewModel.currentWeather == nil {
                viewModel.locationManager.requestLocation()
            }
        }
    }
}
