// View/WeatherDetailView.swift

import SwiftUI

// MARK: - üõë –î–û–ü–û–ú–Ü–ñ–ù–ï –†–û–ó–®–ò–†–ï–ù–ù–Ø: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
extension UIApplication {
    /// –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–∞–∫—Ä–∏–≤–∞—î –µ–∫—Ä–∞–Ω–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ —Å–∏—Å—Ç–µ–º–Ω—É –¥—ñ—é 'resignFirstResponder'.
    func endEditing() {
        sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
    }
}

// MARK: - –°–¢–ò–õ–¨ –ö–ù–û–ü–ö–ò –ó –ï–§–ï–ö–¢–û–ú –ì–†–ê–î–Ü–Ñ–ù–¢–ê
/// –°—Ç–≤–æ—Ä—é—î –Ω–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä—É, –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω—É –∫–Ω–æ–ø–∫—É –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è (scale down/fade).
struct GradientPressableButtonStyle: ButtonStyle {
    
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .padding(.horizontal, 10)
            .padding(.vertical, 8)
            .background(
                LinearGradient( // –ö–∞—Å—Ç–æ–º–Ω–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π —Ñ–æ–Ω
                    gradient: Gradient(colors: [
                        Color.white.opacity(0.3),
                        Color.white.opacity(configuration.isPressed ? 0.7 : 0.5) // –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ
                    ]),
                    startPoint: .leading,
                    endPoint: .trailing
                )
            )
            .cornerRadius(8)
            .scaleEffect(configuration.isPressed ? 0.95 : 1.0) // –ï—Ñ–µ–∫—Ç —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è
            .foregroundColor(.white)
            .animation(.easeOut(duration: 0.15), value: configuration.isPressed)
    }
}


// MARK: - –ì–û–õ–û–í–ù–ê VIEW: WeatherDetailView

struct WeatherDetailView: View {
    
    // MARK: - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    
    @ObservedObject var viewModel: WeatherViewModel
    @ObservedObject var favoritesVM: FavoritesViewModel
    @State private var cityInput: String = "" // –°—Ç–∞–Ω –¥–ª—è —Ç–µ–∫—Å—Ç—É –≤ –ø–æ–ª—ñ –ø–æ—à—É–∫—É
    
    // MARK: - Body View
    
    var body: some View {
        // üõë GeometryReader —è–∫ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –µ–∫—Ä–∞–Ω–∞
        GeometryReader { geometry in
            ZStack {
                
                // 1. –ì—Ä–∞–¥—ñ—î–Ω—Ç –§–û–ù–£
                LinearGradient(
                    gradient: Gradient(colors: viewModel.getBackgroundGradient()),
                    startPoint: .topLeading,
                    endPoint: .bottomTrailing
                )
                .ignoresSafeArea(.all) // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –≤–µ—Å—å –µ–∫—Ä–∞–Ω, –≤–∫–ª—é—á–∞—é—á–∏ Status Bar

                // 2. –û—Å–Ω–æ–≤–Ω–∏–π –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ö–æ–Ω—Ç–µ–Ω—Ç—É
                VStack(spacing: 15) {
                    
                    Spacer().frame(height: 1) // –ö–æ–º–ø–µ–Ω—Å–∞—Ü—ñ–π–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
                    
                    // MARK: - 1. –ü–∞–Ω–µ–ª—å –ü–æ—à—É–∫—É
                    SearchPanel(viewModel: viewModel, cityInput: $cityInput)
                    
                    // MARK: - 2. –°—Ç–∞—Ç—É—Å —Ç–∞ –ü–æ–º–∏–ª–∫–∏
                    StatusAndErrorView(viewModel: viewModel)
                    
                    // MARK: - 3. –û–°–ù–û–í–ù–ò–ô –í–ï–†–¢–ò–ö–ê–õ–¨–ù–ò–ô –°–ö–†–û–õ
                    WeatherScrollView(viewModel: viewModel, favoritesVM: favoritesVM, geometry: geometry)
                }
                .padding(.top, 10)
                .foregroundColor(.white) // –ó–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É
                .shadow(color: .black.opacity(0.8), radius: 5, x: 0, y: 2) // –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—ñ–Ω—å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
                .background(Color.clear)
            } // –ó–∞–∫—Ä–∏—Ç—Ç—è ZStack
        } // –ó–∞–∫—Ä–∏—Ç—Ç—è GeometryReader
        
        // MARK: - –°–∏—Å—Ç–µ–º–Ω—ñ –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏
        .onAppear {
            // üõë –ê–ö–¢–ò–í–ê–¶–Ü–Ø CORE LOCATION –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
            if viewModel.currentWeather == nil {
                viewModel.locationManager.requestLocation()
            }
        }
        // üõë –ó–ê–ö–†–ò–¢–¢–Ø –ö–õ–ê–í–Ü–ê–¢–£–†–ò –ü–†–ò –¢–ê–ü–Ü –ù–ê –§–û–ù
        .contentShape(Rectangle())
        .onTapGesture {
            UIApplication.shared.endEditing()
        }
    }
    
    // =============================================================
    // MARK: - –í–ù–£–¢–†–Ü–®–ù–Ü –°–¢–†–£–ö–¢–£–†–ò UI (Subviews)
    // =============================================================

    /// 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ü–∞–Ω–µ–ª—ñ –ø–æ—à—É–∫—É (TextField —Ç–∞ Button)
    private struct SearchPanel: View {
        @ObservedObject var viewModel: WeatherViewModel
        @Binding var cityInput: String
        
        var body: some View {
            HStack {
                TextField("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞", text: $cityInput) // –ü–æ–ª–µ –≤–≤–æ–¥—É
                    .padding(8)
                    .background(Color.white.opacity(0.3)).cornerRadius(8)
                    .foregroundColor(.white).colorScheme(.dark)
                    .tint(.white) // –ö–æ–ª—ñ—Ä –∫—É—Ä—Å–æ—Ä–∞
                
                Button("–ü–æ—à—É–∫") {
                    if !cityInput.isEmpty {
                        viewModel.fetchWeather(cityInput, nil, nil) // –í–∏–∫–ª–∏–∫ –ø–æ—à—É–∫—É –∑–∞ –º—ñ—Å—Ç–æ–º
                        UIApplication.shared.endEditing() // –ó–∞–∫—Ä–∏—Ç—Ç—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
                    }
                }
                .buttonStyle(GradientPressableButtonStyle())
            }
            .padding(.horizontal)
        }
    }
    
    /// 2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–º–∏–ª–æ–∫
    private struct StatusAndErrorView: View {
        @ObservedObject var viewModel: WeatherViewModel
        
        var body: some View {
            if viewModel.isLoading {
                ProgressView("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏...").foregroundColor(.white)
            } else if let errorMsg = viewModel.errorMessage {
                // –í–∏–≤—ñ–¥ –ø–æ–º–∏–ª–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                Text("‚ùå \(errorMsg)").foregroundColor(.red).padding()
            }
        }
    }
    
    /// 3. –ì–æ–ª–æ–≤–Ω–∏–π —Å–∫—Ä–æ–ª –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤
    private struct WeatherScrollView: View {
        @ObservedObject var viewModel: WeatherViewModel
        @ObservedObject var favoritesVM: FavoritesViewModel
        let geometry: GeometryProxy // –î–æ—Å—Ç—É–ø –¥–æ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏—Å–æ—Ç–∏
        
        var body: some View {
            ScrollView(.vertical, showsIndicators: false) {
                
                VStack { // ‚¨ÖÔ∏è –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π VStack –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
                    if let weather = viewModel.currentWeather {
                        VStack(spacing: 10) {
                            
                            // 3.1. –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ (–ù–∞–∑–≤–∞, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ö–Ω–æ–ø–∫–∞ –£–ª—é–±–ª–µ–Ω–µ)
                            MainWeatherInfo(weather: weather, favoritesVM: favoritesVM, viewModel: viewModel)
                            
                            // 3.2. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –ü—Ä–æ–≥–Ω–æ–∑ (24 –≥–æ–¥)
                            HorizontalForecastSection(viewModel: viewModel)
                            
                            // 3.3. 5-–¥–µ–Ω–Ω–∏–π –ü—Ä–æ–≥–Ω–æ–∑ (–ö–Ω–æ–ø–∫–∏)
                            DailyForecastSection(viewModel: viewModel)
                            
                        }
                        .padding(.horizontal)
                        .padding(.bottom, 20)
                        
                    }
                    
                    // –ó–∞–≥–ª—É—à–∫–∞, —è–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î
                    else if !viewModel.isLoading && viewModel.errorMessage == nil {
                        VStack {
                            Spacer()
                            Text("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–≥–æ–¥–∏").foregroundColor(.white.opacity(0.8))
                            Spacer()
                        }
                    }
                    
                } // –ó–∞–∫—Ä–∏—Ç—Ç—è –í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ VStack
                .frame(minHeight: geometry.size.height - 100) // ‚¨ÖÔ∏è –†–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤–º—ñ—Å—Ç—É –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω
                .scrollBounceBehavior(.basedOnSize) // –£–º–æ–≤–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å–∫–æ–∫–æ–º
                
            } // –ó–∞–∫—Ä–∏—Ç—Ç—è ScrollView
        }
    }
    
    /// 4. –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –∫–∞—Ä—Ç–∫–∞ (–ü–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
    private struct MainWeatherInfo: View {
        let weather: CurrentWeatherResponse
        @ObservedObject var favoritesVM: FavoritesViewModel
        @ObservedObject var viewModel: WeatherViewModel
        
        var body: some View {
            VStack(spacing: 10) {
                Text(weather.name).font(.largeTitle).bold()
                
                HStack {
                    if let iconURL = weather.weather.first?.iconURL {
                        AsyncImage(url: iconURL) { phase in
                            if let image = phase.image { image.resizable().frame(width: 100, height: 100) }
                            else { ProgressView().frame(width: 100, height: 100).tint(.white) }
                        }
                    }
                    Text(weather.main.temperatureString).font(.system(size: 80)).fontWeight(.light)
                }
                
                Text(weather.weather.first?.description.capitalized ?? "–ù–µ–≤—ñ–¥–æ–º–æ").font(.title3)
                
                Button { favoritesVM.addCity(weather.name) } label: { Label("–î–æ–¥–∞—Ç–∏ –¥–æ –£–ª—é–±–ª–µ–Ω–∏—Ö", systemImage: "star.fill") }
                    .buttonStyle(GradientPressableButtonStyle())
                    .padding(.top)
            }
        }
    }
    
    /// 5. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π —Å–∫—Ä–æ–ª (–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑)
    private struct HorizontalForecastSection: View {
        @ObservedObject var viewModel: WeatherViewModel
        
        var body: some View {
            VStack(alignment: .leading, spacing: 5) {
                Text("–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ü—Ä–æ–≥–Ω–æ–∑ (24 –≥–æ–¥)").font(.headline)
                    .frame(maxWidth: .infinity, alignment: .leading).padding(.top, 20)

                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 12) {
                        ForEach(viewModel.forecastItems, id: \.dt) { item in
                            ForecastItemView(item: item)
                        }
                    }
                }
                .frame(height: 140) // –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤–∏—Å–æ—Ç–∞ —Å–∫—Ä–æ–ª—É
                .scrollBounceBehavior(.basedOnSize)
            }
        }
    }
    
    /// 6. –°–µ–∫—Ü—ñ—è 5-–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É (–ö–Ω–æ–ø–∫–∏)
    private struct DailyForecastSection: View {
        @ObservedObject var viewModel: WeatherViewModel
        
        var body: some View {
            VStack(alignment: .leading, spacing: 5) {
                Text("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤").font(.title2).bold()
                    .frame(maxWidth: .infinity, alignment: .leading).padding(.top, 20)

                ForEach(viewModel.dailyForecast, id: \.dt) { item in
                    DailyForecastItemView(item: item, viewModel: viewModel) // ‚¨ÖÔ∏è –ö–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó
                }
            }
        }
    }
}
