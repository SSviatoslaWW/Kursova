// Networking/WeatherService.swift

import Foundation

class WeatherService {
    
    // MARK: - Core Fetch Method
    
    private func fetchData<T: Decodable>(endpoint: String, queryItems: [URLQueryItem], completion: @escaping (Result<T, APIError>) -> Void) {
        
        var components = URLComponents(string: Constants.baseURL + endpoint)
        
        var baseQueryItems = [
            URLQueryItem(name: "appid", value: Constants.apiKey),     // üîë API –∫–ª—é—á
            URLQueryItem(name: "units", value: Constants.units),      // üå°Ô∏è –ú–µ—Ç—Ä–∏—á–Ω—ñ –æ–¥–∏–Ω–∏—Ü—ñ (¬∞C)
            URLQueryItem(name: "lang", value: "uk")                   // üåê –ú–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞)
        ]
        
        baseQueryItems.append(contentsOf: queryItems)
        components?.queryItems = baseQueryItems
        
        guard let url = components?.url else {
            completion(.failure(.invalidURL))
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            
            if let error = error {
                completion(.failure(.other(error.localizedDescription)))
                return
            }
            
            if let httpResponse = response as? HTTPURLResponse {
                let statusCode = httpResponse.statusCode
                
                if statusCode == 404 {
                    completion(.failure(.cityNotFound)) // üõë –ü–æ–º–∏–ª–∫–∞: –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                    return
                } else if statusCode != 200 {
                    completion(.failure(.other("HTTP Error: \(statusCode)")))
                    return
                }
            }
            
            guard let data = data else {
                completion(.failure(.noData))
                return
            }
            
            
            do {
                let decodedObject = try JSONDecoder().decode(T.self, from: data)
                
                // –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –£–°–ü–Ü–•–£ (–í–∏–≤–æ–¥–∏—Ç—å—Å—è —É –∫–æ–Ω—Å–æ–ª—å)
                print("‚úÖ DECODE SUCCESS: Successfully decoded object of type \(T.self)")
                
                completion(.success(decodedObject)) // –£—Å–ø—ñ—Ö
            } catch let decodeError {
                
                // –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ú–ò–õ–ö–ò –î–ï–ö–û–î–£–í–ê–ù–ù–Ø
                print("‚ùå DECODE FAILURE: Decoding failed for type \(T.self)!")
                print("JSONDecoder Error: \(decodeError)")
                
                if let jsonString = String(data: data, encoding: .utf8) {
                    print("--- RECEIVED RAW JSON (for \(T.self)): ---")
                    print(jsonString.prefix(500) + "...")
                    print("--------------------------------------------------")
                }
                
                completion(.failure(.decodingError))
            }
            
        }.resume() // –ó–∞–ø—É—Å–∫–∞—î –º–µ—Ä–µ–∂–µ–≤–∏–π –∑–∞–ø–∏—Ç.
    }
    
    // =============================================================
    // MARK: - Public API Endpoints (–ó–∞–ø–∏—Ç –∑–∞ –ù–∞–∑–≤–æ—é –ú—ñ—Å—Ç–∞)
    // =============================================================
    
    /// –ó–∞–ø–∏—Ç—É—î –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É –∑–∞ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞.
    func fetchCurrentWeather(city: String, completion: @escaping (Result<CurrentWeatherResponse, APIError>) -> Void) {
        let cityNameQuery = [URLQueryItem(name: "q", value: city)] // –ü–∞—Ä–∞–º–µ—Ç—Ä: ?q=city
        fetchData(endpoint: "weather", queryItems: cityNameQuery, completion: completion)
    }
    
    /// –ó–∞–ø–∏—Ç—É—î –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞.
    func fetchForecast(city: String, completion: @escaping (Result<ForecastResponse, APIError>) -> Void) {
        let cityNameQuery = [URLQueryItem(name: "q", value: city)] // –ü–∞—Ä–∞–º–µ—Ç—Ä: ?q=city
        fetchData(endpoint: "forecast", queryItems: cityNameQuery, completion: completion)
    }
    
    // =============================================================
    // MARK: - Public API Endpoints (–ó–∞–ø–∏—Ç –∑–∞ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏)
    // =============================================================
    
    // üí° –ü—Ä–∏–≤–∞—Ç–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    private func createCoordinateQuery(lat: Double, lon: Double) -> [URLQueryItem] {
        return [
            URLQueryItem(name: "lat", value: "\(lat)"), // –ü–∞—Ä–∞–º–µ—Ç—Ä —à–∏—Ä–æ—Ç–∏
            URLQueryItem(name: "lon", value: "\(lon)")  // –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–≤–≥–æ—Ç–∏
        ]
    }
    
    /// –ó–∞–ø–∏—Ç—É—î –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É –∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏.
    func fetchCurrentWeather(lat: Double, lon: Double, completion: @escaping (Result<CurrentWeatherResponse, APIError>) -> Void) {
        let query = createCoordinateQuery(lat: lat, lon: lon)
        fetchData(endpoint: "weather", queryItems: query, completion: completion)
    }
    
    /// –ó–∞–ø–∏—Ç—É—î –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤ –∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏.
    func fetchForecast(lat: Double, lon: Double, completion: @escaping (Result<ForecastResponse, APIError>) -> Void) {
        let query = createCoordinateQuery(lat: lat, lon: lon)
        fetchData(endpoint: "forecast", queryItems: query, completion: completion)
    }
}
