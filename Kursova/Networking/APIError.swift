// Networking/APIError.swift

import Foundation // ‚¨ÖÔ∏è –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø 1: –û–±–æ–≤'—è–∑–∫–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è Error, LocalizedError

enum APIError: Error, LocalizedError, Equatable { // ‚¨ÖÔ∏è –û–≥–æ–ª–æ—à—É—î–º–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∏
    case invalidURL
    case cityNotFound
    case decodingError
    case noData
    case other(String) // ‚¨ÖÔ∏è –í–∏–ø–∞–¥–æ–∫ –∑ –∞—Å–æ—Ü—ñ–π–æ–≤–∞–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º
    
    // üõë –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø 2: –Ø–≤–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è Equatable –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è other(String)
    static func == (lhs: APIError, rhs: APIError) -> Bool {
        switch (lhs, rhs) {
        case (.invalidURL, .invalidURL), (.cityNotFound, .cityNotFound), (.decodingError, .decodingError), (.noData, .noData):
            return true
        case let (.other(l), .other(r)):
            return l == r
        default:
            return false
        }
    }
    
    var errorDescription: String? {
        switch self {
        case .cityNotFound: return "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É."
        case .decodingError: return "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞."
        case .invalidURL: return "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL –∑–∞–ø–∏—Ç."
        case .noData: return "–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω–∏—Ö."
        case .other(let msg): return "–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞: \(msg)"
        }
    }
}
