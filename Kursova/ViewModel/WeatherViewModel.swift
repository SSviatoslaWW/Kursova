// ViewModel/WeatherViewModel.swift

import SwiftUI
import Foundation
import CoreLocation

class WeatherViewModel: NSObject, ObservableObject, LocationManagerDelegate {

    // MARK: - Constants & Published Properties
    private let DEFAULT_CITY = "Lviv"
    
    @Published var currentCity: String
    @Published var currentWeather: CurrentWeatherResponse?
    @Published var forecastItems: [ForecastItem] = []
    @Published var dailyForecast: [ForecastItem] = []
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    private let service = WeatherService()
    public var locationManager: LocationManager
    
    private var isInitialLoad = true // üõë –ù–û–í–ò–ô –ü–†–ê–ü–û–†: –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    private var isUserSearch = false // –î–ª—è —Ä–æ–∑—Ä—ñ–∑–Ω–µ–Ω–Ω—è –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    override init() {
        self.currentCity = DEFAULT_CITY
        self.locationManager = LocationManager()
        super.init()
        self.locationManager.delegate = self
        
        // üõë –í–∏–∫–ª–∏–∫ LocationManager.requestLocation() –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —É View/WeatherDetailView.swift onAppear
    }
    
    // MARK: - –ì—Ä–∞–¥—ñ—î–Ω—Ç (–±–µ–∑ –∑–º—ñ–Ω)
    func getBackgroundGradient() -> [Color] {
        guard let mainCondition = currentWeather?.weather.first?.main else {
            return [Color(red: 0.1, green: 0.1, blue: 0.2), Color(red: 0.3, green: 0.3, blue: 0.4)]
        }
        switch mainCondition {
        case "Clear": return [Color(red: 0.3, green: 0.7, blue: 0.9), Color(red: 0.9, green: 0.6, blue: 0.2)]
        case "Clouds": return [Color(red: 0.4, green: 0.5, blue: 0.6), Color(red: 0.7, green: 0.7, blue: 0.7)]
        case "Rain", "Drizzle": return [Color(red: 0.2, green: 0.3, blue: 0.5), Color(red: 0.1, green: 0.2, blue: 0.3)]
        case "Thunderstorm": return [Color(red: 0.1, green: 0.0, blue: 0.2), Color(red: 0.3, green: 0.2, blue: 0.4)]
        case "Snow": return [Color(red: 0.7, green: 0.8, blue: 1.0), Color(red: 0.4, green: 0.5, blue: 0.7)]
        case "Mist", "Smoke", "Haze", "Fog": return [Color(red: 0.7, green: 0.7, blue: 0.7), Color(red: 0.8, green: 0.8, blue: 0.9)]
        default: return [Color(red: 0.5, green: 0.5, blue: 0.5), Color(red: 0.8, green: 0.8, blue: 0.8)]
        }
    }
    
    // MARK: - –û–°–ù–û–í–ù–ò–ô –í–ò–ö–õ–ò–ö –ü–û–ì–û–î–ò
    lazy var fetchWeather: (_ city: String?, _ lat: Double?, _ lon: Double?) -> Void = { [weak self] city, lat, lon in
        guard let self = self else { return }
        
        // üõë –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø –ü–†–ê–ü–û–†–Ü–í
        self.isUserSearch = (city != self.DEFAULT_CITY && city != nil && lat == nil && lon == nil)
        
        self.isLoading = true
        self.errorMessage = nil
        
        if let lat = lat, let lon = lon {
            // –ó–∞–ø–∏—Ç –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            self.fetchWeatherAndForecast(lat: lat, lon: lon, isInitialLoad: self.isInitialLoad)
        } else if let city = city, !city.isEmpty {
            self.currentCity = city
            // –ó–∞–ø–∏—Ç –∑–∞ –º—ñ—Å—Ç–æ–º
            self.fetchWeatherAndForecast(city: city, isInitialLoad: self.isInitialLoad)
        }
    }
    
    // MARK: - –ü–†–ò–í–ê–¢–ù–Ü –ú–ï–¢–û–î–ò –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø
    
    private func fetchWeatherAndForecast(lat: Double, lon: Double, isInitialLoad: Bool) {
        service.fetchCurrentWeather(lat: lat, lon: lon) { [weak self] currentResult in
            self?.handleFetchResults(currentResult: currentResult, isLocationAttempt: true)
        }
    }
    
    private func fetchWeatherAndForecast(city: String, isInitialLoad: Bool) {
        service.fetchCurrentWeather(city: city) { [weak self] currentResult in
            self?.handleFetchResults(currentResult: currentResult, isLocationAttempt: false)
        }
    }

    private func handleFetchResults(currentResult: Result<CurrentWeatherResponse, APIError>, isLocationAttempt: Bool) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            self.isInitialLoad = false // –ü—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó —Å–ø—Ä–æ–±–∏ –ø—Ä–∞–ø–æ—Ä –∑–Ω—ñ–º–∞—î–º–æ
            
            switch currentResult {
            case .success(let response):
                self.currentWeather = response
                self.currentCity = response.name
                // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –∞–±–æ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –∞–±–æ –∑–∞ –Ω–∞–∑–≤–æ—é
                let cityToFetch = isLocationAttempt ? nil : response.name
                self.fetchForecast(city: cityToFetch, lat: response.coord.lat, lon: response.coord.lon)
                
            case .failure(let error):
                
                // üõë 1. –û–ë–†–û–ë–ö–ê –ù–ï–ó–ù–ê–ô–î–ï–ù–û–ì–û –ú–Ü–°–¢–ê –ü–Ü–°–õ–Ø –†–£–ß–ù–û–ì–û –ü–û–®–£–ö–£
                if error == .cityNotFound && self.isUserSearch {
                    self.errorMessage = "–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É."
                    self.currentWeather = nil
                    self.isLoading = false
                    
                // üõë 2. –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–ö–ò –ü–†–ò –ü–û–ß–ê–¢–ö–û–í–û–ú–£ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ü (—Ä–µ–∑–µ—Ä–≤ –õ—å–≤—ñ–≤)
                } else if self.isInitialLoad {
                    self.currentCity = self.DEFAULT_CITY
                    self.fetchWeatherAndForecast(city: self.DEFAULT_CITY, isInitialLoad: false) // –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –õ—å–≤—ñ–≤
                    
                // 3. –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ (–ø—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ—é, –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è–º)
                } else {
                    self.errorMessage = error.localizedDescription
                    self.isLoading = false
                }
            }
        }
    }
    
    // ... (fetchForecast —Ç–∞ handleForecastResult - –∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω)
    private func fetchForecast(city: String?, lat: Double?, lon: Double?) {
        if let lat = lat, let lon = lon {
            service.fetchForecast(lat: lat, lon: lon) { [weak self] forecastResult in
                self?.handleForecastResult(forecastResult)
            }
        } else if let city = city {
            service.fetchForecast(city: city) { [weak self] forecastResult in
                self?.handleForecastResult(forecastResult)
            }
        }
    }
    
    private func handleForecastResult(_ result: Result<ForecastResponse, APIError>) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            self.isLoading = false
            
            switch result {
            case .success(let response):
                self.forecastItems = Array(response.list.prefix(8))
                self.dailyForecast = self.filterDailyForecast(response.list)
            case .failure(let error):
                self.errorMessage = self.errorMessage ?? error.localizedDescription
            }
        }
    }
    
    private func filterDailyForecast(_ list: [ForecastItem]) -> [ForecastItem] {
        var filteredItems: [ForecastItem] = []
        var seenDates: Set<String> = []
        let calendar = Calendar.current
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        for item in list {
            let date = item.date
            let dateString = dateFormatter.string(from: date)
            if !calendar.isDateInToday(date) && !seenDates.contains(dateString) {
                filteredItems.append(item)
                seenDates.insert(dateString)
            }
            if filteredItems.count >= 5 { break }
        }
        return filteredItems
    }

    // MARK: - LocationManagerDelegate (–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥ LocationManager)
    
    // üõë –í–ò–ö–õ–ò–ö–ê–Ñ–¢–¨–°–Ø: –Ø–∫—â–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ
    func didUpdateLocation(lat: Double, lon: Double) {
        // –£—Å–ø—ñ—Ö: –≤–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ—à—É–∫ –ø–æ–≥–æ–¥–∏ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        self.fetchWeather(nil, lat, lon) // CityName = nil, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    }
    
    // üõë –í–ò–ö–õ–ò–ö–ê–Ñ–¢–¨–°–Ø: –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–º–æ–≤–∏–≤ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞
    func didFailWithError() {
        // –ü–æ–º–∏–ª–∫–∞/–í—ñ–¥–º–æ–≤–∞: —è–∫—â–æ —Ü–µ –±—É–≤ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –õ—å–≤–æ–≤–∞
        if self.isInitialLoad {
            self.fetchWeather(self.DEFAULT_CITY, nil, nil)
        }
    }
}
